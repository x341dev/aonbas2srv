name: Build and Release JAR

on:
  push:
    branches:
      - main

env:
  JAVA_VERSION: '21'
  GRADLE_BUILD_TASK: 'jar'
  CONSTANTS_PATH: 'src/main/java/dev/x341/aonbas2srv/util/AOBConstants.java'

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew ${{ env.GRADLE_BUILD_TASK }} -x test

      - name: Extract version from AOBConstants.java
        id: version
        run: |
          CONST_FILE="${{ env.CONSTANTS_PATH }}"
          MAJOR=$(grep "VERSION_MAJOR" "$CONST_FILE" | grep -oE '[0-9]+')
          MINOR=$(grep "VERSION_MINOR" "$CONST_FILE" | grep -oE '[0-9]+')
          BUILD=$(grep "VERSION_BUILD" "$CONST_FILE" | grep -oE '[0-9]+')
          VERSION="$MAJOR.$MINOR.$BUILD"
          VERSION_TAG="v$VERSION"
          
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_OUTPUT

      - name: Determine release type
        id: release_type
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          CURRENT_VERSION="${{ steps.version.outputs.VERSION }}"
          
          if [ -z "$PREV_TAG" ]; then
            RELEASE_TYPE="major"
          else
            PREV_VERSION="${PREV_TAG#v}"
            IFS='.' read -r PREV_MAJOR PREV_MINOR PREV_PATCH <<< "$PREV_VERSION"
            IFS='.' read -r CUR_MAJOR CUR_MINOR CUR_PATCH <<< "$CURRENT_VERSION"

            if [ "$CUR_MAJOR" -gt "$PREV_MAJOR" ]; then
              RELEASE_TYPE="major"
            elif [ "$CUR_MINOR" -gt "$PREV_MINOR" ]; then
              RELEASE_TYPE="minor"
            else
              RELEASE_TYPE="patch"
            fi
          fi

          echo "Detected release type: $RELEASE_TYPE"
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_OUTPUT

      - name: Find JAR
        id: jar
        run: |
          JAR_PATH=$(find build/libs/ -name "*.jar" -type f | head -n 1)
          echo "JAR_PATH=$JAR_PATH" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: ${{ steps.release_type.outputs.RELEASE_TYPE == 'major' || steps.release_type.outputs.RELEASE_TYPE == 'minor' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION_TAG }}
          name: Release ${{ steps.version.outputs.VERSION_TAG }}
          generate_release_notes: true
          files: ${{ steps.jar.outputs.JAR_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
